// Grids
//
// Utility class for displaying grids of items, such as cards, callouts, images, etc.
//
// <div class="grid sg-grid-example grid--2-wide">
//   <div class="grid__item">
//     Grid item
//   </div>
//   <div class="grid__item">
//     Grid item
//   </div>
//   <div class="grid__item">
//     Grid item
//   </div>
//   <div class="grid__item">
//     Grid item
//   </div>
//   <div class="grid__item">
//     Grid item
//   </div>
//   <div class="grid__item">
//     Grid item
//   </div>
//   <div class="grid__item">
//     Grid item
//   </div>
//   <div class="grid__item">
//     Grid item
//   </div>
// </div>
//

.grid {
  @include outer-container;
}

// flexbox for full height cards
.grid--flex {
  flex-wrap: wrap;
  display: flex;

  .grid__item {
    display: flex !important;
  }
}

.grid__item {
  margin-bottom: u(2rem);
  width: 100%;

  &.commissioner-height {
    min-height: u(10rem);
  }
}

.slab.slab--home {
  .grid {
    padding-top: u(3rem);

    .grid__item {
      border-top: 1px solid $inverse-translucent;
      padding-top: u(2.5rem);

      &:first-child {
        border-top: none;
        padding-top: 0;
      }
    }
  }
  .grid--no-border {
    padding-top: u(1rem);

    .grid__item {
      border: none !important;
      padding: 0;
    }
  }
  .grid--no-margin {
    margin: 0;
    padding: 0;
  }
}

.slab--primary.slab--home .grid {
  a {
    color: $primary-contrast;
    border-bottom-color: $primary-contrast;

    &:hover {
      border-bottom-color: $inverse;
    }
  }
}
.slab--secondary.slab--home .grid {
  a {
    color: $secondary-contrast;
    border-bottom-color: $secondary-contrast;

    &:hover {
      border-bottom-color: $inverse;
    }
  }
}

.slab--neutral {
  &.slab--home {
    .grid .grid__item {
      border-top: none;
      margin-bottom: 0;
      padding-bottom: u(2rem);
    }
  }

  .grid__item {
    border-bottom: 1px solid $gray;
  }
}

// BREAKPOINT: MEDIUM
// We set a max-width to prevent the omega mixins from applying multiple times.
// This is based on $large-screen, but we have to convert to px so that we can
// subtract a pixel. Otherwise, the breakpoints will overlap at 860px (the
// large breakpoint).
@include media(min-width $medium-screen max-width (strip-units($large-screen) * $em-base - 1)) {
  .grid--2-wide,
  .grid--3-wide,
  .grid--4-wide,
  .grid--6-wide {
    .grid__item {
      @include span-columns(6);
      @include omega(2n);
    }
  }

  .grid__item--no-margin {
    margin-bottom: 0;
    padding-bottom: 0;
  }

  .slab .grid {
    .grid__item:nth-last-child(-n+2) {
      border-top: 1px solid $inverse;
      margin-top: 0;
    }
  }
}

@include media($lg) {
  .grid--2-wide {
    .grid__item {
      @include span-columns(6);
      @include omega(2n);
    }
  }

  .grid--3-wide {
    .grid__item {
      @include span-columns(4);
      @include omega(3n);
    }
  }

  .grid--4-wide {
    .grid__item {
      @include span-columns(3);
      @include omega(4n);
    }
  }

  .grid--6-wide {
    .grid__item {
      @include span-columns(2);
      @include omega(6n);
    }
  }

  .slab {
    .grid--2-wide {
      .grid__item:nth-child(-n+2) {
        border-top: none;
        padding-top: 0;
      }
    }

    .grid--3-wide {
      .grid__item:nth-child(-n+3) {
        border-top: none;
        padding-top: 0;
      }
    }

    .grid--no-border {
      .grid__item {
        padding-bottom: u(2rem);
      }
    }
  }
}
